// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserBadge {
  BRONZE
  SILVER
  GOLD
}


model User {
  id                    String        @id @default(uuid())
  name                  String
  email                 String        @unique
  isGoogleAuthenticated Boolean       @default(false)
  picture               String?
  password              String
  role                  Role          @default(USER)
  badge                 UserBadge     @default(BRONZE)
  createdAt             DateTime      @default(now())
  walletBalance         Float         @default(0)
  phone                 String?
  whatsapp              String?
  facebook              String?
  instagram             String?
  tiktok                String?

  events                Event[]       @relation("CreatedEvents")
  tickets               Ticket[]

  actualities           Actuality[]   @relation("Actualities")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  picture     String
  description String?
  location    String
  date        DateTime
  createdAt   DateTime @default(now())
  category    String

  createdBy   User     @relation("CreatedEvents", fields: [createdById], references: [id])
  createdById String

  tickets     Ticket[]
}

model Ticket {
  id          String   @id @default(uuid())
  code        String   @unique
  used        Boolean  @default(false)
  
  createdAt   DateTime @default(now())

  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?

  buyerName   String?
  buyerPhone  String?
  buyerEmail  String?
}

model Actuality {
  id          String    @id @default(uuid())
  
  user        User      @relation("Actualities", fields: [userId], references: [id])
  userId      String

  picture     String
  description String?
  createdAt   DateTime  @default(now())
}


